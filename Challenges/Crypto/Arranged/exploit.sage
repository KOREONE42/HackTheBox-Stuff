from sage.all import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Util.number import long_to_bytes
from hashlib import sha256

# Given points from output.txt
A = (
    6174416269259286934151093673164493189253884617479643341333149124572806980379124586263533252636111274525178176274923169261099721987218035121599399265706997,
    2456156841357590320251214761807569562271603953403894230401577941817844043774935363309919542532110972731996540328492565967313383895865130190496346350907696
)
B = (
    5988601072335190267607626269694202717170383512532989213900345448657641222212196937725485374210603546742409649154478860998573202499999124529884522786776964,
    1979660325653723467116529048392433203266542286102635118367760228627475646827461168434739881080159207311102652868018376000583885500682322201011066971591840
)
G_coords = (
    926644437000604217447316655857202297402572559368538978912888106419470011487878351667380679323664062362524967242819810112524880301882054682462685841995367,
    4856802955780604241403155772782614224057462426619061437325274365157616489963087648882578621484232159439344263863246191729458550632500259702851115715803253
)

# Step 1: Recover p and b
x1 = A[1]**2 - B[1]**2 - A[0]**3 - 726*A[0] + B[0]**3 + 726*B[0]
x2 = A[1]**2 - G_coords[1]**2 - A[0]**3 - 726*A[0] + G_coords[0]**3 + 726*G_coords[0]
p  = gcd(x1, x2)
b  = int((A[1]**2 - A[0]**3 - 726*A[0]) % p)
print("Recovered prime p:", p)
print("Recovered curve parameter b:", b)

# Step 2: Define the elliptic curve and generator
F = GF(p)
E = EllipticCurve(F, [726, b])
G = E(G_coords[0], G_coords[1])
ord = G.order()
print("Order of G:", ord)

# Step 3: Encrypted flag and IV
enc_flag = b"\xe3Nf1\xd4\xf7g\xad\xa6\xa4q\x8e\x85\x99\xa2/>\xb0u\x16\x1f\xc5\x1e\x8a\xf3\xd0t\xf5\xc4F\x9a\xce"
iv = b"2__\xd9]3k\x94\x893\x1a\x7f\x93\xd5\x14\x05"

# Step 4: Bruteforce decryption over the small subgroup
print("Bruteforcing decryption...")
for i in range(1, ord + 1):
    P = i * G
    secret = int(P[0])
    key = sha256(long_to_bytes(secret)).digest()[16:32]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(enc_flag)
    try:
        decrypted = unpad(decrypted, 16)
    except ValueError:
        pass
    if b'HTB{' in decrypted:
        print("Flag found (i = {}): {}".format(i, decrypted))
        break
