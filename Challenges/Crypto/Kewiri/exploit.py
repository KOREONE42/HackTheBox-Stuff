from pwn import *

r = remote("94.237.123.146", 33585)

a = 408179155510362278173926919850986501979230710105776636663982077437889191180248733396157541580929479690947601351140
b = 8133402404274856939573884604662224089841681915139687661374894548183248327840533912259514444213329514848143976390134

# Receiving p
p = 21214334341047589034959795830530169972304000967355896041112297190770972306665257150126981587914335537556050020788061
r.readuntil(b"p = ")
pc = int(r.readline()[:-1])
if pc != p:
    print("Prime numbers do not match!")
    exit()

# TASK 1
print(r.readuntil(b"> "))
r.sendline(str(p.bit_length()).encode())

# TASK 2
factors_str = "2,2_5,1_635599,1_2533393,1_4122411947,1_175521834973,1_206740999513,1_1994957217983,1_215264178543783483824207,1_10254137552818335844980930258636403,1"
print(r.readuntil(b"> "))
r.sendline(factors_str.encode())

# TASK 3
print(r.readuntil(b"0.\n"))

factors = {
    2: 2,
    5: 1,
    635599: 1,
    2533393: 1,
    4122411947: 1,
    175521834973: 1,
    206740999513: 1,
    1994957217983: 1,
    215264178543783483824207: 1,
    10254137552818335844980930258636403: 1
}

def is_generator(g):
    phi = p - 1  # Order of the multiplicative group F_p*

    # Check if g^(phi/q) != 1 (mod p) for all prime factors q
    for q in factors.keys():
        if pow(g, phi // q, p) == 1:
            return False  # g is not a generator
    return True

for i in range(17):
    x = r.readuntil(" > ")
    if b"?" in x:
        g = int(x[:-4])
    if not is_generator(g):
        r.sendline(b"0")
    else:
        r.sendline(b"1")

# TASK 4
print(r.readuntil(b"a = "))
ac = int(r.readline()[:-1])
print(r.readuntil(b"b = "))
bc = int(r.readline()[:-1])

if not (ac == a and bc == b):
    print("a and b do not match!")
    exit()

print(r.readuntil(b" > "))
r.sendline(str(p).encode())

# TASK 5
factors2_str = "2,2_7,2_21214334341047589034959795830530169972304000967355896041112297190770972306665257150126981587914335537556050020788061,1_2296163171090566549378609985715193912396821929882292947886890025295122370435191839352044293887595879123562797851002485690372901374381417938210071827839043175382685244226599901222328480132064138736290361668527861560801378793266019,1"

print(r.readuntil(b" > "))
r.sendline(factors2_str.encode())

# TASK 6 (requires a running docker container that is listening on localhost:1337)
Gx = 10754634945965100597587232538382698551598951191077578676469959354625325250805353921972302088503050119092675418338771

print(r.readuntil(b"te: "))
Gxc = int(r.readline()[:-1])

if Gxc != Gx:
    print("Gxc does not match Gx!")
    exit()

print(r.readuntil(b"te: "))
Ax = int(r.readline()[:-1])

# query the sage server
r2 = remote("127.0.0.1", 1337)
r2.sendline(str(Ax).encode())
r2.readuntil(b"d = ")
d = int(r2.readline()[:-1])

# return response
r.sendline(str(d).encode())
r2.close()

r.interactive()