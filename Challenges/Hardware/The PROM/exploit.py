import socket, re, sys, time

HOST = "83.136.254.202"
PORT = 52101

PROMPT = b"> "

def recv_until(sock, token=PROMPT, chunk=4096):
    buf = b""
    while token not in buf:
        data = sock.recv(chunk)
        if not data:
            break
        buf += data
    return buf

def sendline(sock, s: str):
    sock.sendall(s.encode() + b"\n")

def addr_to_volts(addr: int, secret=True):
    # Build A10..A0 as 11 entries, 5V for 1, 0V for 0
    bits = []
    for bit in range(10, -1, -1):  # A10 down to A0
        bits.append(5 if (addr >> bit) & 1 else 0)
    if secret:
        # Force A9 (index 1) to 12V to access device-ID space
        bits[1] = 12
    return bits

def parse_read_line(line: bytes):
    # Expected: b"Read 0x48 at address 0x7e0\n"
    m = re.search(rb"Read\s+(0x[0-9a-fA-F]+)\s+at\s+address\s+(0x[0-9a-fA-F]+)", line)
    if not m:
        return None, None
    return int(m.group(1), 16), int(m.group(2), 16)

def main():
    with socket.create_connection((HOST, PORT), timeout=10) as s:
        # Welcome & help
        recv_until(s, PROMPT)

        # Configure control pins for read: CE=0V (enable), OE=0V (enable), WE=5V (disable write)
        for cmd in ("set_ce_pin(0)", "set_oe_pin(0)", "set_we_pin(5)"):
            sendline(s, cmd)
            recv_until(s, PROMPT)

        out_bytes = []
        for addr in range(0x7E0, 0x800):
            volts = addr_to_volts(addr, secret=True)
            sendline(s, f"set_address_pins({volts})")
            recv_until(s, PROMPT)

            sendline(s, "read_byte()")
            resp = recv_until(s, PROMPT)

            # The line with the data should be just before the prompt
            # Parse the last line that starts with 'Read'
            lines = [ln for ln in resp.splitlines() if ln.strip().startswith(b"Read ")]
            if not lines:
                print(f"[!] Unexpected response at 0x{addr:03x}:\n{resp.decode(errors='ignore')}")
                sys.exit(1)
            value, echoed_addr = parse_read_line(lines[-1])
            if value is None:
                print(f"[!] Could not parse readback at 0x{addr:03x}:\n{lines[-1].decode(errors='ignore')}")
                sys.exit(1)
            out_bytes.append(value)

        try:
            text = bytes(out_bytes).decode("utf-8", errors="replace")
        except Exception:
            text = "".join(chr(b) if 32 <= b < 127 else "?" for b in out_bytes)

        print(text)

if __name__ == "__main__":
    main()
