#!/usr/bin/env python3
"""
Module for decoding flag strings from a sequence of integer offsets.
"""
from typing import Iterable

def decode_flag(encoded_values: Iterable[int]) -> str:
    """
    Decode a sequence of integer offsets into a flag string.

    The encoding works in fixed windows of five values: at the start
    of each window, the running offset resets to zero. Each character
    is obtained by adding the current value to the last value seen
    in the window (or zero at the window start), and interpreting
    the result as a Unicode code point.

    Args:
        encoded_values (Iterable[int]): A sequence of integer offsets.

    Returns:
        str: The decoded flag string.
    """
    chars: list[str] = []
    offset = 0

    for index, value in enumerate(encoded_values):
        # Reset offset at the start of each window of five
        if index % 5 == 0:
            offset = 0
        # Compute the character code and append
        chars.append(chr(offset + value))
        # Update offset for next iteration
        offset = value

    return "".join(chars)


def main() -> None:
    """
    Entry point: decodes a predefined list of values and prints the flag.
    """
    encoded_values = [
        72, 12, 54, 69, 46,
        101, -2, 101, -53,
        162, 112, -67,
        164, -64,
        116, 98, 16, 36, -3, 128
    ]
    flag = decode_flag(encoded_values)
    print(flag)


if __name__ == "__main__":
    main()
