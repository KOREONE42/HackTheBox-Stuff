import os

def extract_flag_bytes(data: bytes) -> bytearray:
    """
    Extracts the raw flag bytes from the binary data based on predefined offsets.

    The function reads contiguous byte ranges and a terminating byte identified by
    an XOR condition.

    Args:
        data (bytes): The binary content to scan for flag bytes.

    Returns:
        bytearray: Collected raw flag bytes before final decoding.
    """
    # Ranges of offsets to extract from the binary
    ranges = [
        (0x1223, 0x122b),
        (0x122d, 0x1235),
        (0x1241, 0x1249),
        (0x124b, 0x1253),
    ]

    flag_bytes = bytearray()
    # Extend the bytearray with each specified slice
    for start, end in ranges:
        flag_bytes.extend(data[start:end])

    # Locate terminating byte: first byte that when XORed with 42 equals ord(']')
    for byte in data[0x1253:0x1270]:
        if byte ^ 42 == ord(']'):
            flag_bytes.append(byte)
            break

    return flag_bytes

def decode_flag(flag_bytes: bytearray) -> str:
    """
    Decodes the flag bytes by applying two-stage XOR transformations.

    First, each byte is XORed with 42. Second, the resulting sequence is
    XORed with its index position.

    Args:
        flag_bytes (bytearray): Raw bytes extracted from the binary.

    Returns:
        str: The decoded flag string.
    """
    # Stage 1: XOR each byte with 42
    stage1 = bytearray(b ^ 42 for b in flag_bytes)
    # Stage 2: XOR each result with its index
    decoded = bytearray((b ^ idx) for idx, b in enumerate(stage1))
    return decoded.decode('utf-8', errors='replace')

def read_library(path: str) -> bytes:
    """
    Reads the contents of a shared object library file.

    Args:
        path (str): Filesystem path to the .so file.

    Returns:
        bytes: The binary contents of the file.

    Raises:
        FileNotFoundError: If the specified file does not exist.
    """
    if not os.path.isfile(path):
        raise FileNotFoundError(f"File not found: {path}")

    with open(path, 'rb') as f:
        return f.read()

def main(library_path: str = './library.so') -> None:
    """
    Main entry point for flag extraction and decoding.

    Reads the binary, extracts the raw flag bytes, decodes them, and prints
    the flag in the format HTB{...}.

    Args:
        library_path (str): Path to the shared library binary.
    """
    data = read_library(library_path)
    raw_flag = extract_flag_bytes(data)
    flag = decode_flag(raw_flag)
    print("HTB{" + flag)

if __name__ == '__main__':
    main()
