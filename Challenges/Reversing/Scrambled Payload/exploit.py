#!/usr/bin/env python3
import re
import sys
import base64

# Hardcoded regex patterns from the decoded VBScript
patterns = [
    # Only length check (36 chars) -- not used for char extraction
    r"^.{36}$",
    # First character-class pattern
    r"^[MSy][FfK][ERT][yCM][efI][\{31][KeN][jIS][Uol][z5j][\}TR][DNV][4Qj][kY_][\{Qw][Qz9][R\{h][UF_][9Ns][l7W][SQI][lPb][9ZQ][QTJ][Y97][Ei3][IKL][x0U][iUX][FOE][QnU][xL8][RT_][\lkL][d\}q][9Sa]$",
    # Second character-class pattern
    r"^[\{Sp][F7H][R1t][CHG][ze5][1na][D7N][jGJ][U\}r][kBj][RSq][ZEN][3WQ][k9q][Kw9][XzV][WkR][FLi][m94][HW2][dQT][r\{l][9\}t][tpT][B8Y][A13][TI0][M7x][EZU][yFb][Quh][BRx][TsA][kQJ][3Xd][r39]$",
    # Third character-class pattern
    r"^[WoS][cFe][_yR][CzE][Xce][1HN][OYN][vTj][uDU][MYj][Rr7][GN4][tEQ][8kd][wnr][zpI][5Ra][F2x][9hP][xeW][9JQ][lRF][9ai][j7T][UVY][c3F][enI][fwx][vUH][xXF][Q1\{][EVx][5TX][Fki][Zdw][of9]$"
]

# We only need the three complex patterns to extract the payload string
char_patterns = patterns[1:]

# Extract character classes from each pattern
char_classes = []
for pat in char_patterns:
    # Find all bracketed classes in order
    classes = re.findall(r"\[([^\]]+)\]", pat)
    if len(classes) != 36:
        print(f"Pattern length mismatch: found {len(classes)} classes, expected 36")
        sys.exit(1)
    char_classes.append(classes)

# Compute intersection of allowed chars per position
encoded_chars = []
for i in range(36):
    # Gather the set of allowed chars at position i from each pattern
    sets = [set(cls[i]) for cls in char_classes]
    common = set.intersection(*sets)
    if len(common) != 1:
        print(f"Ambiguity at position {i}: {common}")
        sys.exit(1)
    encoded_chars.append(common.pop())

encoded = ''.join(encoded_chars)
print(f"Base64-encoded payload: {encoded}")

# Decode and wrap in HTB{ }
try:
    decoded = base64.b64decode(encoded).decode('utf-8')
except Exception as e:
    print(f"Base64 decode failed: {e}")
    sys.exit(1)

flag = f"HTB{{{decoded}}}"
print(f"Flag: {flag}")