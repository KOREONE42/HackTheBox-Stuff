#!/usr/bin/env python3
import tensorflow as tf
import struct
import hashlib
import random
import numpy as np

def main():
    # Enable unsafe deserialization to allow loading of Lambda layers
    tf.keras.config.enable_unsafe_deserialization()

    # Load the malicious Keras model (disable safe_mode)
    model = tf.keras.models.load_model('mlcious.keras', compile=False, safe_mode=False)

    # Step 1: Extract seed_dense weights
    w1, b1 = model.get_layer('seed_dense').get_weights()
    # Compute SHA-1 digest of concatenated bytes
    digest = hashlib.sha1(w1.tobytes() + b1.tobytes()).digest()
    # Derive seed from first 4 bytes
    seed = struct.unpack('<I', digest[:4])[0]
    print(f'Derived seed: 0x{seed:08x}')

    # Step 2: Generate XOR key
    rng = random.Random(seed)
    key_bytes = rng.randbytes(32)
    key = list(key_bytes)

    # Step 3: Extract encrypted flag bytes from payload_dense bias
    bias = model.get_layer('payload_dense').get_weights()[1]
    # Take first 22 floats, scale and cast to uint8
    enc_flag_bytes = (bias[:22] * 255).astype(np.uint8)
    cipher = list(enc_flag_bytes)
    print('Encrypted bytes:', cipher)

    # Step 4: Decrypt flag by XORing with key
    flag_bytes = bytes(c ^ key[i % len(key)] for i, c in enumerate(cipher))
    try:
        flag = flag_bytes.decode()
    except UnicodeDecodeError:
        flag = flag_bytes
    print('Flag:', flag)

if __name__ == '__main__':
    main()
