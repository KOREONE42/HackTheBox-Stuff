#!/usr/bin/env python3
from pwn import remote

HOST = "94.237.60.191"
PORT = 32555


class Circuit:
    """
    Represents a quantum gate sequence to be sent to the server.
    Gates are recorded internally and can be serialized as a semicolon-separated string.
    """
    def __init__(self) -> None:
        self._gates: list[str] = []

    def H(self, q: int) -> None:
        """Apply a Hadamard gate to qubit `q`."""
        self._gates.append(f"H:{q}")

    def T(self, q: int) -> None:
        """Apply a T gate to qubit `q`."""
        self._gates.append(f"T:{q}")

    def TDG(self, q: int) -> None:
        """Apply a T-dagger gate to qubit `q`."""
        self._gates.append(f"TDG:{q}")

    def CZ(self, c: int, t: int) -> None:
        """Apply a controlled-Z gate with control qubit `c` and target qubit `t`."""
        self._gates.append(f"CZ:{c},{t}")

    def CX(self, c: int, t: int) -> None:
        """
        Apply a controlled-X (CNOT) gate using Hadamard and CZ decomposition:
        CX = H(target) → CZ(control,target) → H(target)
        """
        self.H(t)
        self.CZ(c, t)
        self.H(t)

    def toffoli(self, c1: int, c2: int, t: int) -> None:
        """
        Apply a Toffoli (CCX) gate on qubits `c1`, `c2` controlling `t`,
        using the standard H/T/CZ/CX decomposition.
        """
        # First layer on target
        self.H(t)
        self.CX(c2, t)
        self.TDG(t)
        self.CX(c1, t)
        self.T(t)
        self.CX(c2, t)
        self.TDG(t)
        self.CX(c1, t)
        self.T(t)
        self.H(t)

        # Cleanup on controls
        self.T(c2)
        self.CX(c1, c2)
        self.TDG(c2)
        self.T(c1)
        self.CX(c1, c2)

    def serialize(self, drop: int = 0) -> str:
        """
        Return the gate sequence as a single semicolon-separated string.
        If `drop` > 0, omit that many initial gates from the output.
        """
        return ";".join(self._gates[drop:])


def build_circuit() -> Circuit:
    """
    Construct the specific circuit:
      1. Toffoli on (0,1) → 3, then CX(0,1)
      2. Toffoli on (1,2) → 3, then CX(1,2)
    """
    circ = Circuit()
    circ.toffoli(0, 1, 3)
    circ.CX(0, 1)
    circ.toffoli(1, 2, 3)
    circ.CX(1, 2)
    return circ


def main() -> None:
    """Build the circuit, connect to remote service, and send the gate sequence."""
    circ = build_circuit()
    sequence = circ.serialize(drop=2)  # skip the first two placeholder gates

    # Connect and sync with the server prompt
    conn = remote(HOST, PORT)
    # Read until two prompts ("> ")
    conn.recvuntil(b"> ")
    conn.recvuntil(b"> ")

    # Send the circuit description (without trailing semicolon)
    conn.sendline(sequence.encode())

    # Print whatever comes back
    print(conn.recvall(timeout=5).decode(), end="")


if __name__ == "__main__":
    main()
